const path = require('path');

if (process.env.NODE_ENV !== "production") {
    require('dotenv').config({ path: path.join(__dirname, '../.env') });
}

const CitiesAndProvinces = require('./CitiesAndProvinces');
const axios = require('axios');

// Mongoose
const mongoose = require('mongoose');
const Floor = require('../models/floor');
const Slot = require('../models/slot');
const HourPricePair = require('../models/hourPricePair');
const User = require('../models/user');
const ParkingLot = require('../models/parkingLot');
const Review = require('../models/review');

mongoose.set('strictQuery', true);
async function main() {
    await mongoose.connect('mongodb://127.0.0.1:27017/ParkPin',)
        .then(() => console.log('Mongodb connection successful'));
}
main().catch(() => console.log('Mongodb connection failed'));

// Returns a random value from a given object or array
const getSampleFromData = data => (data[getRandNum(data.length)]);

// Returns a random number between the floor (inclusive) and ceil (exclusive)
const getRandNum = (ceil, floor = 0) => {
    return Math.floor(Math.random() * (ceil - floor)) + floor
};

// Test user will be the owner for all the autogenerated parkin lots
let testUser = null;
// Deletes all the old users and creates a new user then assigns it to testUser
const resetUsers = async () => {
    // Clear old users
    await User.deleteMany();

    // Create a new user
    const newUser = new User({
        username: 'Tester',
        password: '123',
        email: 'test@gmail.com',
        birthDate: '01-01-2000'
    });

    testUser = await newUser.save();
};

// Gets random landscape oriented images from a collection on Unsplash
const getRandImgURL = async () => {
    try {
        const resp = await axios.get('https://api.unsplash.com/photos/random', {

            params: {
                client_id: process.env.UNSPLASH_ACCESS_KEY,
                collections: 'YrD1o4l6cWs',
                orientation: 'landscape'
            },
        });
        return resp.data.urls.regular
    } catch (err) {
        console.error(err);
        return err;
    }
}

// Creates randomly picked hour - price pairs.
const createRandomPrices = () => {
    let randStartingPrice = getRandNum(20, 1);
    const randPriceStep = getRandNum(20, 5);

    let currentTime = 0;

    const generatedPairs = [];

    while (currentTime < 24) {
        let endTime = currentTime + getRandNum(3, 1);

        if (currentTime >= 12) {
            currentTime = 0;
            endTime = 24;
        } else if (currentTime >= 6) {
            endTime = 12;
        }

        const pair = new HourPricePair({
            start: currentTime,
            end: endTime,
            price: randStartingPrice
        })

        generatedPairs.push(pair)
        randStartingPrice += randPriceStep;
        currentTime += endTime;
        pair.save();
    }

    return generatedPairs;
}

const createRandomFloors = async (floorCount, parkingLot) => {
    const createdFloors = [];

    for (let i = 0; i < floorCount; i++) {
        const newFloor = new Floor({
            slots: await createRandomSlots(getRandNum(100, 10), i + 1, parkingLot),
            floorNum: i + 1
        })

        await newFloor.save()
            .then(floor => createdFloors.push(floor))
            .catch(err => console.log(`Error while saving a new floor ${err}`))
    }

    return createdFloors;
}

const createRandomSlots = async (slotCount, floorNum, parkingLot) => {
    const createdSlots = [];

    for (let i = 0; i < slotCount; i++) {
        const newSlot = new Slot({
            isFull: getRandNum(2, 0) ? true : false,
            floorNum: floorNum,
            locatedAt: parkingLot
        });

        await newSlot.save()
            .then(slot => createdSlots.push(slot))
            .catch(err => console.log(`Error while saving a new slot ${err}`))
    }

    return createdSlots;
}

/* Deletes old parking lots, creates new parking lots with random properties and
Assigns all those newly created parking lots to testUser. */
const resetParkingLots = async () => {
    // Clear old lots
    await ParkingLot.deleteMany();
    await Floor.deleteMany();
    await Slot.deleteMany();
    await HourPricePair.deleteMany();
    await Review.deleteMany();

    // Create new lots 
    for (let i = 0; i < 3; i++) {
        // Get new lot's data
        const randCity = getSampleFromData(Object.keys(CitiesAndProvinces));
        const randProvince = getSampleFromData(CitiesAndProvinces[randCity]);

        // Create a new lot
        const newLot = new ParkingLot({
            name: `${randCity} - ${randProvince} Parking Lot`,
            owner: testUser,
            location: `${randCity} - ${randProvince}`,
            available: Math.random() > 0.07,
            priceTable: createRandomPrices(),
            pictureLink: await getRandImgURL()
        })

        // Assign the lot to testUser but saves the user only after the slot has been saved
        testUser.ParkingLots.push(newLot._id);

        // Create random number of floors and assign them to the new parking lot
        newLot.floors = await createRandomFloors(getRandNum(5, 1), newLot);

        // Save the lot
        await newLot.save()
            .then(async () => {
                console.log(`The lot #${i + 1} has been saved`);
                return await testUser.save();
            })
            .then(() => console.log(`The lot #${i + 1} has been associated with owner`))
            .catch(err => console.log(`Error: The lot #${i + 1} couldn't be saved`, err));
    }

}

const seedDB = async () => {
    await resetUsers()
        .then(() => console.log('Reset all users'))
        .catch(err => console.log('Error while resetting users', err))
    await resetParkingLots()
        .then(() => console.log('Reset all parking lots'))
        .catch(err => console.log('Error while resetting parking lots', err));
}

seedDB()
    .then(() => {
        console.log('Closing mongo connection');
        mongoose.connection.close()
    })